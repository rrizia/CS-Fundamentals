an event external to the currently
executing process that causes a change in
the normal flow of instruction execution;
usually generated by hardware devices
external to the CPU

Key point is that interrupts are
asynchronous w.r.t. current process
• Typically indicate that some device needs service

• People like connecting devices
• A computer is much more than the CPU
• Keyboard, mouse, screen, disk drives
• Scanner, printer, sound card, camera, etc.
• These devices occasionally need CPU service
• But we can’t predict when
• External events typically occur on a macroscopic
timescale
• we want to keep the CPU busy between events
Need a way for CPU to find out devices need
attention

CPU periodically checks each device to see
if it needs service
˚ takes CPU time even when no requests pending
˚ overhead may be reduced at expense of
response time
¸ can be efficient if events arrive rapidly
“Polling is like picking up your phone every few
seconds to see if you have a call. …”



Alternative: Interrupts
• Give each device a wire (interrupt line) that
it can use to signal the processor
• When interrupt signaled, processor executes a
routine called an interrupt handler to deal with
the interrupt
• No overhead when no requests pending

Details are architecture dependent!
• Interrupt controller signals CPU that interrupt has
occurred, passes interrupt number
• Interrupts are assigned priorities to handle simultaneous
interrupts
• Lower priority interrupts may be disabled during service
• CPU senses (checks) interrupt request line after
every instruction; if raised, then:
• uses interrupt number to determine which handler to start
• interrupt vector associates handlers with interrupts
• Basic program state saved (as for system call)
• CPU jumps to interrupt handler
• When interrupt done, program state reloaded and
program resumes
